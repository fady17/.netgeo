// <auto-generated />
using System;
using AutomotiveServices.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AutomotiveServices.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250611010126_AddAnonymousUserPreferencesTable")]
    partial class AddAnonymousUserPreferencesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutomotiveServices.Api.Models.AnonymousCartItem", b =>
                {
                    b.Property<Guid>("AnonymousCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AnonymousUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("PriceAtAddition")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceImageUrlSnapshot")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ServiceNameSnapshotAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ServiceNameSnapshotEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShopNameSnapshotAr")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ShopNameSnapshotEn")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ShopServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AnonymousCartItemId");

                    b.HasIndex("AnonymousUserId")
                        .HasDatabaseName("IX_AnonymousCartItems_AnonymousUserId");

                    b.HasIndex("AnonymousUserId", "ShopId", "ShopServiceId")
                        .IsUnique()
                        .HasDatabaseName("IX_AnonymousCartItems_AnonUser_Shop_Service");

                    b.ToTable("AnonymousCartItems");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.AnonymousUserPreference", b =>
                {
                    b.Property<Guid>("AnonymousUserPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnonymousUserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("LastKnownLatitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("LastKnownLocationAccuracy")
                        .HasColumnType("double precision");

                    b.Property<double?>("LastKnownLongitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("LastSetAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LocationSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("OtherPreferencesJson")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AnonymousUserPreferenceId");

                    b.HasIndex("AnonymousUserId")
                        .IsUnique()
                        .HasDatabaseName("IX_AnonymousUserPreferences_AnonymousUserId");

                    b.ToTable("AnonymousUserPreferences");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography(Point, 4326)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Cities_IsActive");

                    b.HasIndex("Location")
                        .HasDatabaseName("IX_Cities_Location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Cities_Slug");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.CityWithCoordinatesView", b =>
                {
                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Country");

                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("Longitude");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NameAr");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("NameEn");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Slug");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("StateProvince");

                    b.ToTable((string)null);

                    b.ToView("CityWithCoordinates", (string)null);
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.GlobalServiceDefinition", b =>
                {
                    b.Property<int>("GlobalServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GlobalServiceId"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultDescriptionAr")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DefaultDescriptionEn")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("DefaultEstimatedDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultIconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DefaultNameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DefaultNameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsGloballyActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GlobalServiceId");

                    b.HasIndex("ServiceCode")
                        .IsUnique();

                    b.ToTable("GlobalServiceDefinitions");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("DescriptionAr")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography(Point, 4326)");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OpeningHours")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ServicesOffered")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Slug")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Shops_Category");

                    b.HasIndex("CityId")
                        .HasDatabaseName("IX_Shops_CityId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Shops_IsDeleted");

                    b.HasIndex("Location")
                        .HasDatabaseName("IX_Shops_Location");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Location"), "GIST");

                    b.HasIndex("CityId", "Slug")
                        .IsUnique()
                        .HasDatabaseName("IX_Shops_CityId_Slug")
                        .HasFilter("\"Slug\" IS NOT NULL");

                    b.HasIndex("CityId", "Category", "IsDeleted")
                        .HasDatabaseName("IX_Shops_CityId_Category_IsDeleted");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.ShopDetailsView", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("Location");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpeningHours")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ServicesOffered")
                        .HasColumnType("text");

                    b.Property<double>("ShopLatitude")
                        .HasColumnType("double precision")
                        .HasColumnName("ShopLatitude");

                    b.Property<double>("ShopLongitude")
                        .HasColumnType("double precision")
                        .HasColumnName("ShopLongitude");

                    b.Property<string>("ShopSlug")
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("ShopDetailsView", (string)null);
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.ShopService", b =>
                {
                    b.Property<Guid>("ShopServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomServiceNameAr")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CustomServiceNameEn")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("EffectiveNameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EffectiveNameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("GlobalServiceId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsOfferedByShop")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPopularAtShop")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShopSpecificDescriptionAr")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ShopSpecificDescriptionEn")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ShopSpecificIconUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ShopServiceId");

                    b.HasIndex("GlobalServiceId");

                    b.HasIndex("ShopId");

                    b.HasIndex("ShopId", "IsOfferedByShop");

                    b.ToTable("ShopServices");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.Shop", b =>
                {
                    b.HasOne("AutomotiveServices.Api.Models.City", "City")
                        .WithMany("Shops")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.ShopService", b =>
                {
                    b.HasOne("AutomotiveServices.Api.Models.GlobalServiceDefinition", "GlobalServiceDefinition")
                        .WithMany("ShopServices")
                        .HasForeignKey("GlobalServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("AutomotiveServices.Api.Models.Shop", "Shop")
                        .WithMany("ShopServices")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GlobalServiceDefinition");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.City", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.GlobalServiceDefinition", b =>
                {
                    b.Navigation("ShopServices");
                });

            modelBuilder.Entity("AutomotiveServices.Api.Models.Shop", b =>
                {
                    b.Navigation("ShopServices");
                });
#pragma warning restore 612, 618
        }
    }
}
